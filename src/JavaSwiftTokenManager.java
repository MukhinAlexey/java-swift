/* JavaSwiftTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. JavaSwiftTokenManager.java */
import java.io.FileInputStream;
import java.io.FileNotFoundException;

/** Token Manager. */
@SuppressWarnings("unused")public class JavaSwiftTokenManager implements JavaSwiftConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xc000000000000L) != 0L)
         {
            jjmatchedKind = 6;
            return -1;
         }
         if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 9;
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L || (active1 & 0x408040000100000L) != 0L || (active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 7;
            return 25;
         }
         if ((active0 & 0x2L) != 0L || (active1 & 0xc0L) != 0L)
            return 35;
         if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 43;
            return 0;
         }
         if ((active0 & 0x280800000000000L) != 0L || (active1 & 0x100a02400004000L) != 0L || (active2 & 0x101000L) != 0L)
         {
            jjmatchedKind = 7;
            return 21;
         }
         if ((active0 & 0x15000L) != 0L)
         {
            jjmatchedKind = 11;
            return -1;
         }
         if ((active0 & 0xf57324f050000000L) != 0L || (active1 & 0xfaf749dbc3efbd36L) != 0L || (active2 & 0x1e7efffL) != 0L)
         {
            jjmatchedKind = 7;
            return -1;
         }
         if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 9;
            return 28;
         }
         if ((active0 & 0x6000000L) != 0L || (active2 & 0x30078c0000000L) != 0L)
         {
            jjmatchedKind = 43;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x6000000L) != 0L || (active2 & 0x5000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 43;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x15000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xc000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 6;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x200800000000000L) != 0L || (active1 & 0x100000000000000L) != 0L || (active2 & 0x101000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return 20;
         }
         if ((active0 & 0xf57324f070000000L) != 0L || (active1 & 0xfeffedffc3ffbd36L) != 0L || (active2 & 0x1efefffL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0xc000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 6;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xf733a4f070000000L) != 0L || (active1 & 0xffffedff82ffbd16L) != 0L || (active2 & 0x1ffffffL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0xc000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 6;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xf71384e030000000L) != 0L || (active1 & 0xffcfed7b82ffbd16L) != 0L || (active2 & 0x1ffffffL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 6;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xa41384a020000000L) != 0L || (active1 & 0xffc5ed4b02ff3906L) != 0L || (active2 & 0x1bfdd7fL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 6;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xa003040000000000L) != 0L || (active1 & 0xfbc5e04800b32806L) != 0L || (active2 & 0x1bfcc7fL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 6;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x2002040000000000L) != 0L || (active1 & 0x6945600800122006L) != 0L || (active2 & 0x19dcc7fL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 6;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x2040000000000L) != 0L || (active1 & 0x6905600000102000L) != 0L || (active2 & 0x199c47eL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x6801600000100000L) != 0L || (active2 & 0x108047cL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x800600000100000L) != 0L || (active2 & 0x108046cL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x800600000100000L) != 0L || (active2 & 0x1080444L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x40000000000L) != 0L || (active1 & 0x800600000000000L) != 0L || (active2 & 0x44L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active1 & 0x800600000000000L) != 0L || (active2 & 0x44L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active1 & 0x800600000000000L) != 0L || (active2 & 0x4L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active1 & 0x600000000000L) != 0L || (active2 & 0x4L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active1 & 0x600000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active1 & 0x600000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active1 & 0x600000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active1 & 0x600000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active1 & 0x600000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active1 & 0x600000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active1 & 0x600000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active1 & 0x600000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active1 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 7;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc0L, 0x0L);
      case 33:
         return jjStopAtPos(0, 43);
      case 34:
         return jjStopAtPos(0, 9);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x30f80000000L, 0x12003c000009L, 0x0L);
      case 36:
         return jjStopAtPos(0, 162);
      case 37:
         return jjStopAtPos(0, 24);
      case 38:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000000L);
      case 40:
         return jjStopAtPos(0, 173);
      case 41:
         return jjStopAtPos(0, 174);
      case 42:
         return jjStopAtPos(0, 23);
      case 43:
         return jjStopAtPos(0, 18);
      case 44:
         return jjStopAtPos(0, 155);
      case 45:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L);
      case 46:
         jjmatchedKind = 153;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000L);
      case 47:
         return jjStartNfaWithStates_0(0, 43, 0);
      case 48:
         return jjMoveStringLiteralDfa1_0(0x15000L, 0x0L, 0x0L);
      case 58:
         return jjStopAtPos(0, 157);
      case 59:
         return jjStopAtPos(0, 156);
      case 60:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L, 0x0L);
      case 63:
         return jjStopAtPos(0, 43);
      case 64:
         return jjStopAtPos(0, 167);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 170);
      case 92:
         return jjStartNfaWithStates_0(0, 9, 28);
      case 93:
         return jjStopAtPos(0, 171);
      case 95:
         return jjStopAtPos(0, 8);
      case 96:
         return jjStopAtPos(0, 175);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x40208000000000L, 0x800018080000000L, 0x60L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x1000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x2002400L, 0x400L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1080000001820000L, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2002000000008000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x408040000100000L, 0x80000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x10000000080002L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x280800000000000L, 0x100a02400004000L, 0x101000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0x2090L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400200000000L, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L, 0x1000200L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000020L, 0x40c002L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8004000000000000L, 0x240005L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2041000000000L, 0x200800L, 0x10100L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4500000000000000L, 0x4220000100010004L, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x21000010000000L, 0x1001000400010L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0xa000000000000000L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x40000800040100L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 168);
      case 124:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000000L);
      case 125:
         return jjStopAtPos(0, 169);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 164);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4000000L);
      case 51:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 56:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 61:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      case 62:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         break;
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200400000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000020000000L, active1, 0x500a02100400L, active2, 0x2000L);
      case 98:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0xa00000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1102041000000000L, active1, 0x1030000038a20806L, active2, 0x10080L);
      case 102:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         return jjMoveStringLiteralDfa2_0(active0, 0x10480000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0x440100L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x20040000000L, active1, 0x4c00c0004000000L, active2, 0x80108L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000c100000000L, active1, 0x8040L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xa200a00000000000L, active1, 0x102000000000000L, active2, 0x101000L);
      case 111:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L, active2, 0x1000611L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x404002L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x28002010000000L, active1, 0x8004018080001000L, active2, 0x40004L);
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800020000000001L, active2, 0x60L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000000000L, active2, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x4008000000080000L, active2, 0xa00000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000080L, active2, 0x8000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100010000L, active2, 0L);
      case 120:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0x1000000000010L, active2, 0x800L);
      case 124:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 166);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 154);
         break;
      case 54:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 56:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 83:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1010000000000000L, active1, 0x80080L, active2, 0x20000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000000000L, active2, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400280000000L, active2, 0L);
      case 100:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 36);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x180000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0x8000000000041049L, active2, 0x408006L);
      case 102:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 90);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x820000L, active2, 0x1080L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x108L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200010180000000L, active1, 0x1000000100010100L, active2, 0x40000L);
      case 108:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 30);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000020000000L, active1, 0x40040018100000L, active2, 0x80000L);
      case 109:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0x10000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x408080020002000L, active2, 0x1000e00L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2008800a00000000L, active1, 0x4020000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x404008000000000L, active1, 0x1800000000810L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x200000000400000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000040000000000L, active1, 0x800000000008400L, active2, 0x61L);
      case 116:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0x2000000802200006L, active2, 0x904000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4410000000L, active1, 0x2000000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 121:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(2, 45);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 53);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 54:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(3, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400200000000L, active2, 0L);
      case 83:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 100);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000020000000000L, active1, 0x400100000021000L, active2, 0x800800L);
      case 99:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(3, 115);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x802000000L, active2, 0x4L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(3, 28);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(3, 38);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(3, 50);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(3, 62);
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(3, 74);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(3, 79);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(3, 137);
         return jjMoveStringLiteralDfa4_0(active0, 0x400002000000000L, active1, 0x20010c0000800800L, active2, 0x180010L);
      case 102:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(3, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000100000000L, active2, 0L);
      case 104:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 95);
         return jjMoveStringLiteralDfa4_0(active0, 0x2008000000000L, active1, 0L, active2, 0x108L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000000L, active2, 0x5020L);
      case 107:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(3, 60);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x10a80000000L, active1, 0x40000000100101L, active2, 0x200000L);
      case 109:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(3, 113);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1000000L);
      case 110:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(3, 150);
         return jjMoveStringLiteralDfa4_0(active0, 0x500000000L, active1, 0x1000000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x1040000000000L, active1, 0x800800000400000L, active2, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc0080L, active2, 0x8002L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000020000000L, active1, 0x4000000018000000L, active2, 0L);
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(3, 57);
         else if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(3, 135);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0x4000000012046L, active2, 0x20001L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0x200020000200000L, active2, 0x10000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x40400L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(3, 141);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(4, 70);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(4, 71);
         break;
      case 52:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(4, 104);
         break;
      case 54:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 58:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(4, 106);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(4, 107);
         break;
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 83:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40400000000000L, active2, 0L);
      case 97:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(4, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000800L, active2, 0x40002L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x4a00000000010000L, active2, 0x40L);
      case 100:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(4, 83);
         break;
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(4, 29);
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(4, 32);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(4, 72);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(4, 82);
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0x80000008000007L, active2, 0x40cL);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L, active2, 0x1L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0L, active2, 0x20L);
      case 104:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(4, 89);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x9000100020002000L, active2, 0x230000L);
      case 107:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(4, 76);
         break;
      case 108:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(4, 122);
         break;
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(4, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x2000000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000800000000L, active1, 0x4000000000000L, active2, 0x4000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000L, active2, 0x80000L);
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(4, 58);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0x100820000a00000L, active2, 0x108010L);
      case 115:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(4, 52);
         break;
      case 116:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(4, 47);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(4, 96);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(4, 136);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L, active2, 0x800000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40200000000L, active1, 0x20000L, active2, 0x1000000L);
      case 119:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L, active2, 0L);
      case 120:
         if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(4, 140);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(5, 87);
         break;
      case 52:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(5, 102);
         break;
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 99:
         if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(5, 145);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(5, 149);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0x4020000000001L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(5, 63);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000020000000000L, active1, 0x140000000000000L, active2, 0L);
      case 102:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(5, 93);
         break;
      case 104:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(5, 80);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000008000000L, active2, 0x808841L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1100000020000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(5, 85);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000L, active2, 0x104420L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x40800000000L, active1, 0x4000000000000006L, active2, 0x90008L);
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(5, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(5, 75);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(5, 111);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(5, 119);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(5, 121);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(5, 124);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0L, active2, 0x1040002L);
      case 120:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(5, 127);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(6, 65);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(6, 66);
         break;
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x20800000000L, active1, 0L, active2, 0L);
      case 83:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(6, 99);
         break;
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800100000000000L, active2, 0x1104040L);
      case 99:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(6, 139);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0x100000000000000L, active2, 0L);
      case 100:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(6, 61);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x8000L);
      case 101:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(6, 146);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000L, active2, 0x10004L);
      case 102:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(6, 91);
         break;
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x10400000000L, active1, 0x6001000000000000L, active2, 0x80400L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(6, 33);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0x4000000000000L, active2, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(6, 81);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(6, 118);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x9L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 120:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(6, 128);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000L, active2, 0x10L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 100:
         if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(7, 144);
         break;
      case 101:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(7, 77);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(7, 143);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L, active1, 0L, active2, 0x420L);
      case 103:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(7, 151);
         break;
      case 104:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(7, 67);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x20800000000L, active1, 0x200000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(7, 51);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(7, 114);
         else if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(7, 142);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(7, 148);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0x2000000000100001L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000400000000000L, active2, 0L);
      case 114:
         if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(7, 129);
         break;
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(7, 49);
         break;
      case 116:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(7, 120);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0x800000000000000L, active2, 0x1000040L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x80008L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000000L, active2, 0x4L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L, active1, 0x800000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1000040L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x500000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(8, 34);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(8, 125);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(8, 132);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x420L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(8, 64);
         break;
      case 115:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(8, 112);
         break;
      case 116:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(8, 126);
         return jjMoveStringLiteralDfa9_0(active0, 0x20800000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000L, active1, 0x200000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000000000L, active2, 0x400L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 101:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(9, 108);
         return jjMoveStringLiteralDfa10_0(active0, 0x20800000000L, active1, 0L, active2, 0x4L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 110:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(9, 131);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(9, 133);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L, active1, 0x20000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 101:
         if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(10, 138);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(10, 147);
         break;
      case 103:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(10, 152);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 104:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(10, 84);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x20800000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800200000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x20800000000L, active1, 0x400000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(11, 42);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(11, 40);
         break;
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000000000L, active2, 0x40L);
      case 121:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(12, 35);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(12, 41);
         break;
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200000000000L, active2, 0x4L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 121:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(12, 134);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(13, 123);
         break;
      case 105:
         return jjMoveStringLiteralDfa14_0(active1, 0x400000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active1, 0x200000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active1, 0x20000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, active2);
      return 14;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa15_0(active1, 0x200000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(14, 105);
         break;
      case 111:
         return jjMoveStringLiteralDfa15_0(active1, 0x400000000000L, active2, 0L);
      case 112:
         if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(14, 130);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa16_0(active1, 0x400000000000L);
      case 120:
         return jjMoveStringLiteralDfa16_0(active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa16_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa17_0(active1, 0x400000000000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa17_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa18_0(active1, 0x200000000000L);
      case 120:
         return jjMoveStringLiteralDfa18_0(active1, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa18_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(16, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa19_0(active1, 0x200000000000L);
      case 116:
         return jjMoveStringLiteralDfa19_0(active1, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa19_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(17, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa20_0(active1, 0x400000000000L);
      case 115:
         return jjMoveStringLiteralDfa20_0(active1, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa20_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa21_0(active1, 0x200000000000L);
      case 110:
         return jjMoveStringLiteralDfa21_0(active1, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa21_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(19, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa22_0(active1, 0x200000000000L);
      case 115:
         return jjMoveStringLiteralDfa22_0(active1, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa22_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(20, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa23_0(active1, 0x400000000000L);
      case 110:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(22, 109);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa23_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(21, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, active1, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa24_0(active1, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa24_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(22, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, active1, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(24, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, active1, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0xff000000L
};
static final long[] jjbitVec3 = {
   0xf6c00000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x8034afe00000000L, 0x80000000800000L
};
static final long[] jjbitVec5 = {
   0x7fff00ff00c00000L, 0x7feffffeL, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x0L, 0xffffffffffff0000L, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0x3fffffffffffffL, 0xfffffffffff00000L, 0xffffffffffffffffL
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x1ffffffffff0eL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec11 = {
   0x0L, 0x0L, 0x40000000000000L, 0x0L
};
static final long[] jjbitVec12 = {
   0x0L, 0x0L, 0x8000000000000000L, 0x0L
};
static final long[] jjbitVec13 = {
   0xffffffffffffffffL, 0xffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x0L, 0x0L, 0x0L, 0xffffffffffffffffL
};
static final long[] jjbitVec15 = {
   0x0L, 0x0L, 0x0L, 0xffffffffffff0000L
};
static final long[] jjbitVec16 = {
   0xffff0000ffffL, 0x0L, 0x0L, 0x0L
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 41;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xf000ac6200000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  else if ((0x8400002600L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  else if (curChar == 32)
                     { jjAddStates(0, 2); }
                  if ((0xff000000000000L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  break;
               case 28:
                  if (curChar == 48 && kind > 9)
                     kind = 9;
                  break;
               case 0:
                  if (curChar == 47)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 6:
                  if ((0x8400002600L & l) != 0L && kind > 9)
                     kind = 9;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 9:
                  if ((0x3000000000000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 10:
                  if ((0xff000000000000L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 14:
                  if ((0xf000ac6200000000L & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               case 15:
                  if (curChar == 32 && kind > 43)
                     kind = 43;
                  break;
               case 20:
                  if (curChar == 32 && kind > 59)
                     kind = 59;
                  break;
               case 23:
                  if (curChar == 32 && kind > 73)
                     kind = 73;
                  break;
               case 31:
                  if ((0x1fe000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 33:
                  if (curChar == 32)
                     { jjAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  else if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  else if ((0x5000000040000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  else if (curChar == 92)
                     { jjAddStates(3, 4); }
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  else if ((0x1000000010000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 92)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 35:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 36;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 28:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 1:
                  { jjAddStates(5, 6); }
                  break;
               case 4:
                  if ((0x7fffffeL & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 5:
                  if ((0x7fffffe00000000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 6:
                  if (curChar == 92 && kind > 9)
                     kind = 9;
                  break;
               case 11:
                  if ((0x7e0000007eL & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 13:
                  if ((0x1000000010000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 14:
                  if ((0x5000000040000000L & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               case 21:
               case 36:
                  if (curChar == 110)
                     { jjCheckNAdd(20); }
                  break;
               case 22:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
               case 38:
                  if (curChar == 114)
                     { jjCheckNAdd(23); }
                  break;
               case 25:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 92)
                     { jjAddStates(3, 4); }
                  break;
               case 30:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 32:
                  if (curChar == 125 && kind > 9)
                     kind = 9;
                  break;
               case 34:
                  if (curChar == 110 && kind > 59)
                     kind = 59;
                  break;
               case 37:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 39:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(15); }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(15); }
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(15); }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(5, 6); }
                  break;
               case 7:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 10)
                     kind = 10;
                  break;
               case 14:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 43)
                     kind = 43;
                  break;
               case 16:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(15); }
                  break;
               case 17:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(15); }
                  break;
               case 18:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     { jjCheckNAdd(15); }
                  break;
               case 19:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 44)
                     kind = 44;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 41 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   35, 37, 40, 28, 29, 1, 2, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec9[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec11[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec12[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 3:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec16[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\137", null, null, null, 
"\60\142", null, "\60\157", null, "\60\170", null, "\53", "\55", "\75", null, null, 
"\52", "\45", "\76\75", "\74\75", "\75\75", "\164\162\165\145", 
"\146\141\154\163\145", "\156\151\154", "\43\146\151\154\145", "\43\154\151\156\145", 
"\43\143\157\154\165\155\156", "\43\146\165\156\143\164\151\157\156", 
"\43\143\157\154\157\162\114\151\164\145\162\141\154", "\162\145\144", "\147\162\145\145\156", "\142\154\165\145", 
"\141\154\160\150\141", "\43\146\151\154\145\114\151\164\145\162\141\154", 
"\43\151\155\141\147\145\114\151\164\145\162\141\154", "\162\145\163\157\165\162\143\145\116\141\155\145", null, null, 
"\141\156\171", "\55\76", "\151\156\157\165\164", "\164\150\162\157\167\163", 
"\162\145\164\150\162\157\167\163", "\124\171\160\145", "\120\162\157\164\157\143\157\154", 
"\143\154\141\163\163", "\164\162\171", "\141\163", "\151\163", "\163\145\154\146", 
"\151\156\151\164", "\163\165\160\145\162", null, "\167\145\141\153", 
"\165\156\157\167\156\145\144", "\163\141\146\145", "\165\156\163\141\146\145", 
"\43\163\145\154\145\143\164\157\162", "\147\145\164\164\145\162\72", "\163\145\164\164\145\162\72", 
"\43\153\145\171\120\141\164\150", "\164\171\160\145", "\157\146", "\40\154\145\164\40", "\40\166\141\162\40", 
"\167\150\151\154\145", null, "\143\141\163\145", "\162\145\160\145\141\164", "\142\162\145\141\153", 
"\143\157\156\164\151\156\165\145", "\151\146", "\145\154\163\145", "\163\167\151\164\143\150", 
"\144\145\146\141\165\154\164", "\167\150\145\162\145", "\147\165\141\162\144", 
"\146\141\154\154\164\150\162\157\165\147\150", "\162\145\164\165\162\156", "\164\150\162\157\167", "\144\145\146\145\162\40", 
"\144\157", "\143\141\164\143\150", "\43\151\146", "\43\145\154\163\145\151\146", 
"\43\145\154\163\145", "\43\145\156\144\151\146", "\157\163", "\141\162\143\150", 
"\163\167\151\146\164", "\155\141\143\117\123", "\151\117\123", "\167\141\164\143\150\117\123", 
"\164\166\117\123", "\151\63\70\66", "\170\70\66\137\66\64", "\141\162\155", "\141\162\155\66\64", 
"\43\163\157\165\162\143\145\114\157\143\141\164\151\157\156", "\146\151\154\145\72", "\154\151\156\145\72", 
"\43\141\166\141\151\154\141\142\154\145", 
"\151\117\123\101\160\160\154\151\143\141\164\151\157\156\105\170\164\145\156\163\151\157\156", 
"\155\141\143\117\123\101\160\160\154\151\143\141\164\151\157\156\105\170\164\145\156\163\151\157\156", "\151\155\160\157\162\164", "\164\171\160\145\141\154\151\141\163", 
"\145\156\165\155", "\160\162\157\164\157\143\157\154", "\146\165\156\143", "\147\145\164", 
"\163\145\164", "\167\151\154\154\123\145\164", "\144\151\144\123\145\164", 
"\151\156\144\151\162\145\143\164", "\163\164\162\165\143\164", "\146\151\156\141\154", 
"\141\163\163\157\143\151\141\164\145\144\164\171\160\145", "\144\145\151\156\151\164", "\145\170\164\145\156\163\151\157\156", 
"\163\165\142\163\143\162\151\160\164", "\160\162\145\146\151\170", "\160\157\163\164\146\151\170", 
"\157\160\145\162\141\164\157\162", "\160\162\145\143\145\144\145\156\143\145\147\162\157\165\160", 
"\150\151\147\150\145\162\124\150\141\156", "\154\157\167\145\162\124\150\141\156", 
"\141\163\163\151\147\156\155\145\156\164", "\141\163\163\157\143\151\141\164\151\166\151\164\171", "\154\145\146\164", 
"\162\151\147\150\164", "\156\157\156\145", "\143\157\156\166\145\156\151\145\156\143\145", 
"\144\171\156\141\155\151\143", "\151\156\146\151\170", "\154\141\172\171", 
"\157\160\164\151\157\156\141\154", "\157\166\145\162\162\151\144\145", "\162\145\161\165\151\162\145\144", 
"\163\164\141\164\151\143", "\160\162\151\166\141\164\145", 
"\146\151\154\145\160\162\151\166\141\164\145", "\151\156\164\145\162\156\141\154", "\160\165\142\154\151\143", 
"\157\160\145\156", "\155\165\164\141\164\151\156\147", 
"\156\157\156\155\165\164\141\164\151\156\147", "\56", "\56\56\56", "\54", "\73", "\72", "\77", "\41", "\57", "\134", "\44", 
"\46", "\46\46", "\174", "\174\174", "\100", "\173", "\175", "\133", "\135", "\42", 
"\50", "\51", "\140", "\74", "\76", };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public JavaSwiftTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public JavaSwiftTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 41; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0xffffffffffffffffL, 0x3ffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[41];
    static private final int[] jjstateSet = new int[2 * 41];

    
    static protected char curChar;
}
