/* Generated By:JavaCC: Do not edit this line. JavaSwiftTokenManager.java */
import java.io.FileInputStream;
import java.io.FileNotFoundException;

/** Token Manager. */
public class JavaSwiftTokenManager implements JavaSwiftConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffe749e0e0000000L) != 0L || (active1 & 0xffffdbff87ffffedL) != 0L || (active2 & 0x3ffffffL) != 0L)
         {
            jjmatchedKind = 5;
            return -1;
         }
         if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 9;
            return -1;
         }
         if ((active0 & 0x25000L) != 0L)
         {
            jjmatchedKind = 11;
            return -1;
         }
         if ((active0 & 0xc000000L) != 0L || (active2 & 0x600f380000000L) != 0L)
         {
            jjmatchedKind = 44;
            return -1;
         }
         if ((active0 & 0x18000000000000L) != 0L)
         {
            jjmatchedKind = 4;
            return -1;
         }
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 9;
            return 5;
         }
         return -1;
      case 1:
         if ((active0 & 0xffe749e0e0000000L) != 0L || (active1 & 0xffffdbff87ffffedL) != 0L || (active2 & 0x3ffffffL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x25000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 11;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xc000000L) != 0L || (active2 & 0xa000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 44;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x18000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 4;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0xee6749e0e0000000L) != 0L || (active1 & 0xffffdbff05ff7fadL) != 0L || (active2 & 0x3ffffffL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x18000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 4;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0xee2709c060000000L) != 0L || (active1 & 0xff9fdaf705ff7a2dL) != 0L || (active2 & 0x3ffffffL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x18000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 4;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x4827094040000000L) != 0L || (active1 & 0xff8bda9605fe720dL) != 0L || (active2 & 0x37fbaffL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 4;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x4006080000000000L) != 0L || (active1 & 0xf78bc0900066500dL) != 0L || (active2 & 0x37f98ffL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 4;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x4004080000000000L) != 0L || (active1 & 0xd28ac0100024400cL) != 0L || (active2 & 0x33b98feL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 4;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x4080000000000L) != 0L || (active1 & 0xd20ac00000204000L) != 0L || (active2 & 0x33388fcL) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 4;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x80000000000L) != 0L || (active1 & 0xd002c00000200000L) != 0L || (active2 & 0x21008f8L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x80000000000L) != 0L || (active1 & 0x1000c00000200000L) != 0L || (active2 & 0x21008d8L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x80000000000L) != 0L || (active1 & 0x1000c00000200000L) != 0L || (active2 & 0x2100888L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x80000000000L) != 0L || (active1 & 0x1000c00000000000L) != 0L || (active2 & 0x88L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active1 & 0x1000c00000000000L) != 0L || (active2 & 0x88L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active1 & 0x1000c00000000000L) != 0L || (active2 & 0x8L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active1 & 0xc00000000000L) != 0L || (active2 & 0x8L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active1 & 0xc00000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active1 & 0xc00000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active1 & 0xc00000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active1 & 0xc00000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active1 & 0xc00000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active1 & 0xc00000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active1 & 0xc00000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active1 & 0xc00000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active1 & 0x800000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 5;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 33:
         return jjStopAtPos(0, 44);
      case 34:
         return jjStopAtPos(0, 9);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x61f00000000L, 0x240078000012L, 0x0L);
      case 36:
         return jjStopAtPos(0, 163);
      case 37:
         return jjStopAtPos(0, 25);
      case 38:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000000L);
      case 40:
         return jjStopAtPos(0, 174);
      case 41:
         return jjStopAtPos(0, 175);
      case 42:
         return jjStopAtPos(0, 24);
      case 43:
         return jjStopAtPos(0, 19);
      case 44:
         return jjStopAtPos(0, 156);
      case 45:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L, 0x0L);
      case 46:
         jjmatchedKind = 154;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000L);
      case 47:
         return jjStopAtPos(0, 44);
      case 48:
         return jjMoveStringLiteralDfa1_0(0x25000L, 0x0L, 0x0L);
      case 58:
         return jjStopAtPos(0, 158);
      case 59:
         return jjStopAtPos(0, 157);
      case 60:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L, 0x0L);
      case 63:
         return jjStopAtPos(0, 44);
      case 64:
         return jjStopAtPos(0, 168);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 171);
      case 92:
         return jjStartNfaWithStates_0(0, 9, 5);
      case 93:
         return jjStopAtPos(0, 172);
      case 95:
         return jjStopAtPos(0, 6);
      case 96:
         return jjStopAtPos(0, 176);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80410000000000L, 0x1000030100000000L, 0xc0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x2000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x4004800L, 0x800L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2100000003040000L, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4004000000010000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x810080000200400L, 0x100000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x20000000100004L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1501000000000000L, 0x201404800008000L, 0x202000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000080L, 0x4120L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800400000000L, 0x1000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L, 0x2000400L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000040L, 0x818004L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000L, 0x48000bL);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4082000000000L, 0x401000L, 0x20200L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8a00000000000000L, 0x8440000200020008L, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x42000020000000L, 0x2002000800020L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x1L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x80001000080200L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 169);
      case 124:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000L);
      case 125:
         return jjStopAtPos(0, 170);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 165);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000000L);
      case 51:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 56:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 61:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 62:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400800000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000040000000L, active1, 0xa01404200900L, active2, 0x4000L);
      case 98:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x1400000000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2204082000000000L, active1, 0x206000007144108cL, active2, 0x20100L);
      case 102:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         return jjMoveStringLiteralDfa2_0(active0, 0x20900000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0x880200L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40080000000L, active1, 0x980180008000000L, active2, 0x100210L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20018200000000L, active1, 0x10000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4401400000000000L, active1, 0x204000000000001L, active2, 0x202000L);
      case 111:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4400L, active2, 0x2000c22L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x808004L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x50004020000000L, active1, 0x8030100002000L, active2, 0x80009L);
      case 115:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000040000000002L, active2, 0xc0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000000L, active2, 0x40000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0x8010000000100000L, active2, 0x1400000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000L, active2, 0x10000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200020000L, active2, 0L);
      case 120:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0x2000000000020L, active2, 0x1000L);
      case 124:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 155);
         break;
      case 54:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 56:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 83:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2020000000000000L, active1, 0x100000L, active2, 0x40000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x400000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800500000000L, active2, 0L);
      case 100:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x300000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x82012L, active2, 0x81000dL);
      case 102:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 91);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x1040000L, active2, 0x2100L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x210L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400020300000000L, active1, 0x2000000200020200L, active2, 0x80000L);
      case 108:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000040000000L, active1, 0x80080030200000L, active2, 0x100000L);
      case 109:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0x20000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x810100040004000L, active2, 0x2001c00L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4011001400000000L, active1, 0x8040000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x808010000000000L, active1, 0x3000000001020L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 114:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(2, 72);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(2, 74);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0x400000000800000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0x1000000000010801L, active2, 0xc2L);
      case 116:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(2, 71);
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x400000100440000cL, active2, 0x1208000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8820000000L, active1, 0x4000000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 121:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 46);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(2, 54);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 54:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(3, 102);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800400000000L, active2, 0L);
      case 83:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(3, 101);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x800200000042001L, active2, 0x1001000L);
      case 99:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(3, 116);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1004000000L, active2, 0x8L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(3, 29);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(3, 39);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(3, 51);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(3, 63);
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(3, 75);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(3, 80);
         else if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(3, 138);
         return jjMoveStringLiteralDfa4_0(active0, 0x800004000000000L, active1, 0x4002180001001000L, active2, 0x300020L);
      case 102:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(3, 57);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000L, active2, 0x1L);
      case 104:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(3, 96);
         return jjMoveStringLiteralDfa4_0(active0, 0x4010000000000L, active1, 0L, active2, 0x210L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000000L, active2, 0xa040L);
      case 107:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(3, 61);
         break;
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x21500000000L, active1, 0x80000000200202L, active2, 0x400000L);
      case 109:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(3, 114);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000000L);
      case 110:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(3, 151);
         return jjMoveStringLiteralDfa4_0(active0, 0xa00000000L, active1, 0x2000000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x2080000000000L, active1, 0x1001000000800000L, active2, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x180000L, active2, 0x10004L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000040000000L, active1, 0x8000000030000000L, active2, 0L);
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(3, 58);
         else if ((active2 & 0x100L) != 0L)
            return jjStopAtPos(3, 136);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0x800000002400cL, active2, 0x40002L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x400040000400000L, active2, 0x20000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80800L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(3, 142);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 52:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(4, 105);
         break;
      case 54:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 58:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(4, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(4, 108);
         break;
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 83:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80800000000000L, active2, 0L);
      case 97:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(4, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000001000L, active2, 0x80004L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0x9400000000020000L, active2, 0x80L);
      case 100:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(4, 84);
         break;
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(4, 30);
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(4, 33);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(4, 73);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(4, 83);
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L, active1, 0x10000001000000eL, active2, 0x818L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L, active2, 0x2L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0L, active2, 0x40L);
      case 104:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(4, 90);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000200040004000L, active2, 0x460001L);
      case 107:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(4, 77);
         break;
      case 108:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(4, 123);
         break;
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(4, 38);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0x4000000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x10001000000000L, active1, 0x8000000000000L, active2, 0x8000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000000L, active2, 0x100000L);
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(4, 59);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(4, 88);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0x201040000400000L, active2, 0x210020L);
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(4, 53);
         break;
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(4, 48);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(4, 97);
         else if ((active2 & 0x200L) != 0L)
            return jjStopAtPos(4, 137);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000L, active2, 0x1000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x80400000000L, active1, 0x40000L, active2, 0x2000000L);
      case 119:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 120:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(4, 141);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 52:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(5, 103);
         break;
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 99:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(5, 146);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(5, 150);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0x8040000000002L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 101:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(5, 64);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000040000000000L, active1, 0x280000000000000L, active2, 0L);
      case 102:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(5, 94);
         break;
      case 104:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(5, 81);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000010000000L, active2, 0x1011082L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2200000040000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(5, 86);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000L, active2, 0x208840L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x81000000000L, active1, 0x800000000000000cL, active2, 0x120010L);
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(5, 49);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(5, 76);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(5, 112);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(5, 120);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(5, 122);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(5, 125);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L, active2, 0x2080004L);
      case 120:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(5, 128);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(6, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(6, 67);
         break;
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x41000000000L, active1, 0L, active2, 0L);
      case 83:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(6, 100);
         break;
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000200000000000L, active2, 0x2208080L);
      case 99:
         if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(6, 140);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0x200000000000000L, active2, 0L);
      case 100:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(6, 62);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 101:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(6, 147);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000L, active2, 0x20008L);
      case 102:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(6, 92);
         break;
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x20800000000L, active1, 0xc002000000000000L, active2, 0x100800L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 110:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(6, 34);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0x8000000000000L, active2, 0x4L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 116:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(6, 82);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(6, 119);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x12L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 120:
         if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(6, 129);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000000L, active2, 0x20L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 100:
         if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(7, 145);
         break;
      case 101:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(7, 78);
         else if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(7, 144);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L, active1, 0L, active2, 0x840L);
      case 103:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(7, 152);
         break;
      case 104:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(7, 68);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x41000000000L, active1, 0x400000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(7, 52);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(7, 115);
         else if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(7, 143);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(7, 149);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0x4000000000200002L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000800000000000L, active2, 0L);
      case 114:
         if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(7, 130);
         break;
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(7, 50);
         break;
      case 116:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(7, 121);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0x1000000000000000L, active2, 0x2000080L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x100010L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000000L, active2, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L, active1, 0x1000000000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2000080L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0xa00000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(8, 35);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(8, 126);
         else if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(8, 133);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x840L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(8, 65);
         break;
      case 115:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(8, 113);
         break;
      case 116:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(8, 127);
         return jjMoveStringLiteralDfa9_0(active0, 0x41000000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L, active1, 0x400000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000000L, active2, 0x800L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 101:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(9, 109);
         return jjMoveStringLiteralDfa10_0(active0, 0x41000000000L, active1, 0L, active2, 0x8L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 110:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(9, 132);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x2000000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 116:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(9, 134);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x100000L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000L, active1, 0x40000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 101:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(10, 139);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(10, 148);
         break;
      case 103:
         if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(10, 153);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 104:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(10, 85);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x41000000000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000400000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x41000000000L, active1, 0x800000000000L, active2, 0L);
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(11, 43);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(11, 41);
         break;
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000000000L, active2, 0x80L);
      case 121:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(12, 36);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(12, 42);
         break;
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400000000000L, active2, 0x8L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 121:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(12, 135);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(13, 124);
         break;
      case 105:
         return jjMoveStringLiteralDfa14_0(active1, 0x800000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active1, 0x400000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active1, 0x40000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, active2);
      return 14;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa15_0(active1, 0x400000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(14, 106);
         break;
      case 111:
         return jjMoveStringLiteralDfa15_0(active1, 0x800000000000L, active2, 0L);
      case 112:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(14, 131);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa16_0(active1, 0x800000000000L);
      case 120:
         return jjMoveStringLiteralDfa16_0(active1, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa17_0(active1, 0x800000000000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active1, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa18_0(active1, 0x400000000000L);
      case 120:
         return jjMoveStringLiteralDfa18_0(active1, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa18_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(16, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa19_0(active1, 0x400000000000L);
      case 116:
         return jjMoveStringLiteralDfa19_0(active1, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa19_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(17, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa20_0(active1, 0x800000000000L);
      case 115:
         return jjMoveStringLiteralDfa20_0(active1, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa20_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa21_0(active1, 0x400000000000L);
      case 110:
         return jjMoveStringLiteralDfa21_0(active1, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa21_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(19, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa22_0(active1, 0x400000000000L);
      case 115:
         return jjMoveStringLiteralDfa22_0(active1, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa22_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(20, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa23_0(active1, 0x800000000000L);
      case 110:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(22, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa23_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(21, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, active1, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa24_0(active1, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa24_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(22, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, active1, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(24, 111);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, active1, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffeb000debffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x1e00000000ffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x77bca50000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec4 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffffffeL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffbfffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0x80007c0000003800L, 0xffffffff00100001L, 0xffffffffffffffffL, 0xffffL
};
static final long[] jjbitVec8 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec9 = {
   0x0L, 0xffffffff00000000L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0xffc0000000000000L, 0xfffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec12 = {
   0xfffefffe000000f0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec13 = {
   0x3fffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffff00000000ffffL
};
static final long[] jjbitVec14 = {
   0xffff0000ffffffffL, 0xffffffffffffff9fL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec15 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
static final long[] jjbitVec16 = {
   0xffffffffffffffffL, 0xffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec17 = {
   0x0L, 0x0L, 0x0L, 0xffffffffffffffffL
};
static final long[] jjbitVec18 = {
   0x0L, 0x0L, 0x0L, 0xffffffffffff0000L
};
static final long[] jjbitVec19 = {
   0xffff00000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec20 = {
   0x0L, 0x0L, 0x0L, 0xff000000L
};
static final long[] jjbitVec21 = {
   0xf6c00000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec22 = {
   0x0L, 0x0L, 0x8034afe00000000L, 0x80000000800000L
};
static final long[] jjbitVec23 = {
   0x7fff00ff00c00000L, 0x7feffffeL, 0x0L, 0x0L
};
static final long[] jjbitVec24 = {
   0x0L, 0x0L, 0xffffffffffff0000L, 0xffffffffffffffffL
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0x3fffffffffffffL, 0xfffffffffff00000L, 0xffffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec27 = {
   0x1ffffffffff0eL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec28 = {
   0x0L, 0x0L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec29 = {
   0x0L, 0x0L, 0x40000000000000L, 0x0L
};
static final long[] jjbitVec30 = {
   0x0L, 0x0L, 0x8000000000000000L, 0x0L
};
static final long[] jjbitVec31 = {
   0xffff0000ffffL, 0x0L, 0x0L, 0x0L
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 23;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  else if ((0xf000ac6200000000L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  else if ((0x8400002601L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if ((0xff000000000000L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  if ((0x3000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  break;
               case 4:
                  if ((0x8400002601L & l) != 0L)
                     kind = 9;
                  break;
               case 7:
                  if ((0x1fe000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if ((0x3000000000000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 16:
                  if ((0xf000ac6200000000L & l) != 0L)
                     kind = 44;
                  break;
               case 17:
                  if (curChar == 32)
                     kind = 44;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  else if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 4)
                        kind = 4;
                  }
                  else if ((0x5000000040000000L & l) != 0L)
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if ((0x7e0000007eL & l) != 0L)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  else if ((0x1000000010000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  else if (curChar == 92)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  break;
               case 1:
                  if ((0x7fffffe00000000L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 92 && kind > 9)
                     kind = 9;
                  break;
               case 5:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if (curChar == 125)
                     kind = 9;
                  break;
               case 9:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 13:
                  if ((0x7e0000007eL & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 14:
                  if ((0x2000000020L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 15:
                  if ((0x1000000010000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 16:
                  if ((0x5000000040000000L & l) != 0L)
                     kind = 44;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(17);
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(17);
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(17);
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 3:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 8)
                     kind = 8;
                  break;
               case 10:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 10)
                     kind = 10;
                  break;
               case 16:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 44)
                     kind = 44;
                  break;
               case 18:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(17);
                  break;
               case 19:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(17);
                  break;
               case 20:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(17);
                  break;
               case 21:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2) && kind > 45)
                     kind = 45;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 23 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 36:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec15[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 3:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec19[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      default :
         if ((jjbitVec20[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec27[i2] & l2) != 0L);
      default :
         if ((jjbitVec21[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec28[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec29[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec30[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 3:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 29:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec31[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\137", null, null, null, null, null, 
"\60\142", null, "\60\157", null, null, "\60\170", null, "\53", "\55", "\75", null, null, 
"\52", "\45", "\76\75", "\74\75", "\75\75", "\164\162\165\145", 
"\146\141\154\163\145", "\156\151\154", "\43\146\151\154\145", "\43\154\151\156\145", 
"\43\143\157\154\165\155\156", "\43\146\165\156\143\164\151\157\156", 
"\43\143\157\154\157\162\114\151\164\145\162\141\154", "\162\145\144", "\147\162\145\145\156", "\142\154\165\145", 
"\141\154\160\150\141", "\43\146\151\154\145\114\151\164\145\162\141\154", 
"\43\151\155\141\147\145\114\151\164\145\162\141\154", "\162\145\163\157\165\162\143\145\116\141\155\145", null, null, 
"\141\156\171", "\55\76", "\151\156\157\165\164", "\164\150\162\157\167\163", 
"\162\145\164\150\162\157\167\163", "\124\171\160\145", "\120\162\157\164\157\143\157\154", 
"\143\154\141\163\163", "\164\162\171", "\141\163", "\151\163", "\163\145\154\146", 
"\151\156\151\164", "\163\165\160\145\162", "\151\156", "\167\145\141\153", 
"\165\156\157\167\156\145\144", "\163\141\146\145", "\165\156\163\141\146\145", 
"\43\163\145\154\145\143\164\157\162", "\147\145\164\164\145\162\72", "\163\145\164\164\145\162\72", 
"\43\153\145\171\120\141\164\150", "\164\171\160\145", "\157\146", "\154\145\164", "\166\141\162", 
"\167\150\151\154\145", "\146\157\162", "\143\141\163\145", "\162\145\160\145\141\164", 
"\142\162\145\141\153", "\143\157\156\164\151\156\165\145", "\151\146", "\145\154\163\145", 
"\163\167\151\164\143\150", "\144\145\146\141\165\154\164", "\167\150\145\162\145", 
"\147\165\141\162\144", "\146\141\154\154\164\150\162\157\165\147\150", "\162\145\164\165\162\156", 
"\164\150\162\157\167", "\144\145\146\145\162", "\144\157", "\143\141\164\143\150", "\43\151\146", 
"\43\145\154\163\145\151\146", "\43\145\154\163\145", "\43\145\156\144\151\146", "\157\163", 
"\141\162\143\150", "\163\167\151\146\164", "\155\141\143\117\123", "\151\117\123", 
"\167\141\164\143\150\117\123", "\164\166\117\123", "\151\63\70\66", "\170\70\66\137\66\64", "\141\162\155", 
"\141\162\155\66\64", "\43\163\157\165\162\143\145\114\157\143\141\164\151\157\156", 
"\146\151\154\145\72", "\154\151\156\145\72", "\43\141\166\141\151\154\141\142\154\145", 
"\151\117\123\101\160\160\154\151\143\141\164\151\157\156\105\170\164\145\156\163\151\157\156", 
"\155\141\143\117\123\101\160\160\154\151\143\141\164\151\157\156\105\170\164\145\156\163\151\157\156", "\151\155\160\157\162\164", "\164\171\160\145\141\154\151\141\163", 
"\145\156\165\155", "\160\162\157\164\157\143\157\154", "\146\165\156\143", "\147\145\164", 
"\163\145\164", "\167\151\154\154\123\145\164", "\144\151\144\123\145\164", 
"\151\156\144\151\162\145\143\164", "\163\164\162\165\143\164", "\146\151\156\141\154", 
"\141\163\163\157\143\151\141\164\145\144\164\171\160\145", "\144\145\151\156\151\164", "\145\170\164\145\156\163\151\157\156", 
"\163\165\142\163\143\162\151\160\164", "\160\162\145\146\151\170", "\160\157\163\164\146\151\170", 
"\157\160\145\162\141\164\157\162", "\160\162\145\143\145\144\145\156\143\145\147\162\157\165\160", 
"\150\151\147\150\145\162\124\150\141\156", "\154\157\167\145\162\124\150\141\156", 
"\141\163\163\151\147\156\155\145\156\164", "\141\163\163\157\143\151\141\164\151\166\151\164\171", "\154\145\146\164", 
"\162\151\147\150\164", "\156\157\156\145", "\143\157\156\166\145\156\151\145\156\143\145", 
"\144\171\156\141\155\151\143", "\151\156\146\151\170", "\154\141\172\171", 
"\157\160\164\151\157\156\141\154", "\157\166\145\162\162\151\144\145", "\162\145\161\165\151\162\145\144", 
"\163\164\141\164\151\143", "\160\162\151\166\141\164\145", 
"\146\151\154\145\160\162\151\166\141\164\145", "\151\156\164\145\162\156\141\154", "\160\165\142\154\151\143", 
"\157\160\145\156", "\155\165\164\141\164\151\156\147", 
"\156\157\156\155\165\164\141\164\151\156\147", "\56", "\56\56\56", "\54", "\73", "\72", "\77", "\41", "\57", "\134", "\44", 
"\46", "\46\46", "\174", "\174\174", "\100", "\173", "\175", "\133", "\135", "\42", 
"\50", "\51", "\140", "\74", "\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffff1L, 0xffffffffffffffffL, 0x7ffffffffffffL, 
};
static final long[] jjtoSkip = {
   0xeL, 0x0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[23];
static private final int[] jjstateSet = new int[46];
static protected char curChar;
/** Constructor. */
public JavaSwiftTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public JavaSwiftTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 23; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000000L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
